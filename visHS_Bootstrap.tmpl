/**
* Name: Visited Hotspot Tracker
* Author: Connor Deckers (cdeckers)
* Date: 24 November 2016
*/

var plugin_Hotspots = (plugin_Hotspots !== undefined ? plugin_Hotspots : (function( $ , undefined ) {
  function plugin(args) {
    var pub = {}; //Public facing functions and variables.
    var priv = {
      totals: {
        scenes: {
          visited: 0,
          total: 0,
        },
        spots: {
          visited: 0,
            total: 0,
        },
      }
    }; //Helper container to hold known-private variables.


    var settings = {};
    var defaults = {
      id: '',   //Plugin ID
      font: {   //Font defaults
        size: '12px',
        family: 'Calibri',
        decoration: 'none',
        style: 'normal',
        weight: 'normal',
        color: 'white',
        shadow: '',
        lineheight: '',
      },
      position: 'topleft', //Onscreen position of the information element
      width: 100,
      margin: {  //Margin away from the edge of the screen
        x: 0,
        y: 0,
      },
      parent: "#panoDIV", //Parent element to attach the information element to
      visibility: true,   //Is the element visible?
      LinkImage: '',      //Image to display next to the clickable element of the information element.
      HotspotImage: '',   //Image to overlay on seen hotspots
      Resources: '',      //Resources URI
      Styles: {},         //Object element from styles.tmpl
      ShowVisitedPanos: true, //Show visited panoramas as well?
      Floorplan: {
        Show: false, //Show markers on floorplan?
        Size: {
          Width: 16,  //Icon width
          Height: 16, //Icon height
        },
        Position: {
          Top: 0,     //Icon top spacing
          Left: 0,    //Icon left spacing
        },
      },
      DisplayCounter: true,  //Should the information element appear in a compacted view?
      Storage: {
        StorageMethod: 'localStorage',  //Storage type
        StoreOnClose: true,             //Should the data be saved when the tour is closed?
        AutosaveTime: 15,               //How often should the data autosave in seconds? (0 for never);
        StaleAge: 31,                   //How long should the data be stored for before it's considered stale?
      },
    }

    var data = {    // Object to be serialized upon data save.
      Spots: {              //Spot information.
        History: {},        //List of seen spots in the panos.
      },
      VisitedPanoramas: [], //Stack of panos that have been loaded.
      SpotIndex: {},        //Spot index array
      SpotStack: {},        //Spot stack
      SpotStackHistory: {}, //Spot stack history
      SeenSpotCount: 0,
    }

    priv.data = data;

    //plugin-specific global-access plugin ID
    priv.SceneID = priv.SceneID || '';

    //plugin-specific global-access to onscreen container
    priv.container = priv.container || null;

    //Add CSS Styles
    priv.CSS = priv.CSS || {};

    //Decides internally whether it should be allowed to save when the window is closed/refreshed.
    priv.saveonreload = true;

    //Sorted items from `pub.getspots`
    priv.sorted = {};

    //Add our defaults and overrides to our primary settings object.
    settings = $.extend(true, {}, defaults, args);

    //If the item has no id, then break the creation and close code.
    if(settings.id == '')
    {
      console.error("Invalid ID set.");
      return false;
    }

    /**
     * Identifies the version of the plugin
     * @type {Number}
     */
    pub.version = 0.05;


   /*******************************
    *       PUBLIC FUNCTIONS      *
    *******************************/

    /**
     * Constructor function.
     * Fires automatically when plugin registered.
     * @author cdeckers
     * @version 1
     * @date    2017-01-18
     * @return  {void}
     */
    // pub._construct = function() {
    //
    // }

    /**
     * Process manager to fire off arguments in default order.
     * @author cdeckers
     * @version 0.1
     * @date    2017-01-02
     * @return  {bool}   Returns whether successfully finished.
     */
    pub.process = function() {
      pub.getspots();

      // If we don't want to show our content, then bail out here.
      if(!settings.DisplayCounter) { return false; }

      priv.drawContainer();
      priv.drawContent();
    }

    /**
     * Gets hotspots from the tour and processes them.
     * @author cdeckers
     * @version 0.1
     * @date    2017-01-02
     * @return  {void}
     */
    pub.getspots = function() {
      priv.sorted = {}; //Hold the sorted elements
      var items = krpano.get('hotspot').getArray(); //Get the array of hotspots in the scene
      $.each(items, function(k,v) { //Loop through each hotspot
        if(v.tag == "point") //If it's a point spot, instead of an image spot or something else
        {
          $.each(settings.Styles, function (name, styles) //Loop through each of our pre-defined styles
          {
            if(styles.styles.indexOf(v.style) > -1) //If the style of our hotspot is in our styles list
            {
              priv.sorted[name] = priv.sorted[name] || []; //Create or grab an array with the clean, readable name of our style group.

              data.SpotIndex[priv.SceneID] = data.SpotIndex[priv.SceneID] || {}; //Create or grab the spotIndex container for our scene
              data.SpotStack[priv.SceneID] = data.SpotStack[priv.SceneID] || {}; //Add our spot to a stack, so we know we can cycle through them.
              data.SpotStackHistory[priv.SceneID] = data.SpotStackHistory[priv.SceneID] || {};  //The spot stack history, to establish if an item has already been.

              data.SpotIndex[priv.SceneID][name] = data.SpotIndex[priv.SceneID][name] || 0; //Grab the spotIndex for our current category

              if(styles.display) //If this style should be displayed on screen,
              {
                data.SpotStack[priv.SceneID][name] = data.SpotStack[priv.SceneID][name] || []; //Get the spot stack for our current category
                data.SpotStackHistory[priv.SceneID][name] = data.SpotStackHistory[priv.SceneID][name] || []; //Get the spot stack history for our current category
                if(data.SpotStack[priv.SceneID][name].indexOf(v.name)  == -1 && data.SpotStackHistory[priv.SceneID][name].indexOf(v.name) == -1) //If the current item isn't in our spotstack or our history stack
                {
                  data.SpotStack[priv.SceneID][name].push(v.name); //Add it to our stack then.
                }
              }

              priv.sorted[name]['items'] = priv.sorted[name]['items'] || []; //Create or grab the stack of items for our category
              priv.sorted[name]['items'].push({ //Add a new object to our items stack
                'name': v.name, //Add the name
                'tooltip': ktools.I18N.getInstance().getMessage(v.tooltip), //Get the tooltip
                'pano': priv.getPanoramaName(v.onclick), //Get the pano name
              });
              priv.sorted[name]['display'] = styles.display; //Should the style be displayed?
              priv.sorted[name]['isPano'] = styles.isPano; //Is the style a panorama? (this is used for crossreferencing visited panos between scenes).

              var originalActions = krpano.get('action['+v.onclick+'].content'); //Get the current action of the onclick event.
              krpano.set('action['+v.onclick+'].content', 'jscall(plugin_Hotspots().get("'+settings.id+'").click("'+v.name+'", "'+v.style+'", "'+name+'")); ' + originalActions); //Add our own click event to the end of the onclick event.
              return false; //escapes the .each loop, saving time by ignoring unnecessary checks.
            }
          });
        }
      });
    };

    /**
     * Allows the user to toggle the visibility of the text, for hooking into hide/show control events.
     * If called without a state argument, it will return the items current visibility status.
     * @author cdeckers
     * @version 0.1
     * @date    2016-12-22
     * @param   {bool}   state The items visibility state (true; false;)
     * @return  {bool}         Returns true if the item is successfully toggled.
     */
    pub.visible = function(state)
    {
      if(state === 'undefined') return settings.visibility; //If the argument wasn't passed, then return the current state.
      if(priv.container === 'undefined') return null; //If the container hasn't been built yet, then return a null object that can be checked for.
      $(priv.container).css("display", state?"block":"none"); //Toggle the visiblity of the container
      settings.visibility = state; //Set the internal visibility state to our new state
    };

    /**
     * Fires on hotspot clicks.
     * @author cdeckers
     * @version 0.1
     * @date    2017-01-02
     * @param   {string}   name     Name of the hotspot clicked
     * @param   {string}   style    Style of the hotspot clicked
     * @param   {string}   category Clean name of the item collected from the passed Style item
     * @return  {void}
     */
    pub.click = function(name, style, category)
    {
      var spot = priv.getSpot(category, name); //Get spot object by category and name
      priv.history.add(spot, function(success, data) { //Add the spot, then fire our anonymous callback
        if(success) //If the spot was added successfully
        {
          if(spot.isPano && !settings.ShowVisitedPanos) { return false; } //If the clicked spot is a panorama spot and we've said not to track them, then leave now
          var p = priv.overlay.spotPosition(spot.name); // Find the location of the clicked spot in the world sphere
          priv.overlay.create(spot, p); //Create an overlay spot in that location
        }
        priv.drawContent(); //Redraw content on screen (this updates the text with new numbgers)
      });
    };

    /**
     * Public wrapper of the storage.store() method, allowing it to be called elsewhere.
     * @author cdeckers
     * @version 0.1
     * @date    2017-01-03
     * @return  {void}
     */
    pub.store = function() {
      priv.storage.store(); //Run internal storage function
    };

    /*******************************
     *        EVENT HANDLERS       *
     *******************************/

    //Fires when the tour begins initially.
    $(document).on('pano_ontourstart', function() {
      settings.Storage.StorageMethod = settings.Storage.StorageMethod.replace('storage', 'Storage'); priv.storage.get(); //Get our storage method
      if(settings.Storage.AutosaveTime > 0) { setInterval(function(){if(priv.saveonreload){priv.storage.store();console.log("autosaving..");}}, settings.Storage.AutosaveTime*1000); /* Fires autosave event. */ } //If there's an autosave time greater than 0, fire our save every that many seconds.
    });

    // Fires as soon as the pano begins to load
    $(document).on('pano_onnewscene', function() {
      priv.SceneID = krpano.get('xml.scene'); //Get the scene ID
      priv.history.add({isPano: true, pano: priv.SceneID}); //Add the scene ID to our panorama history
      pub.process(); //Run our process handler again
      priv.floorplan.generate(); //Run our floorplan visited pin handler. (It will handle the logic of whether it can run!)
    });

    //Fires as soon as the preview version of the pano is available, and the hotspots have been placed.
    $(document).on('pano_onpreviewcomplete', function() {
      priv.history.restore(); //Restore our history elements back to our scene.
    });

    //Fires when the window is unloaded (closed, refreshed or navigated away from.)
    window.onbeforeunload = function(e){
      var stats = {}; //Build a statistics object
      stats.total = priv.getSpotCounts(); //Get the total number of spots in the entire tour.

      //Submit our scenes visited and total scene count to Google Analytics
      $(document).trigger('cA_event', {category: 'Goals', action: 'Tour Completion', label: 'All Scenes', projectEvent:true, data: {'metric1':stats.total.scenes.visited,'metric2':stats.total.scenes.total}});
      //Submit our spots visited and total spot count to Google Analytics
      $(document).trigger('cA_event', {category: 'Goals', action: 'Tour Completion', label: 'All Info Spots', projectEvent: true, data: {'metric1':stats.total.spots.visited,'metric2':stats.total.spots.total}});

      $.each(data.Spots.History, function(scene, info) { //For each of the spots in our History stack,
        var total = stats.total.scene[scene]; //Get the value in our total scenes element.
        if(total > 0) //If there are scenes to visit.
        {
          var sceneName = ktools.I18N.getInstance().getMessage(krpano.get('scene['+scene+'].titleid')); //Get the name of the scene from KRPano
          $(document).trigger('cA_event', {category: 'Goals', action: 'Tour Completion', label: 'Scene: ' + sceneName, projectEvent: true, data:{'metric1': info.length, 'metric2': total}}) //Send an event for each scene completion to Google Analytics
        }
      });

      if(settings.Storage.StoreOnClose && priv.saveonreload) //If we store on close, we can save now
      {
        priv.storage.store(); //Run the save function
      }
    };

    //Fires when a keypress is detected.
    //This is used as a debug function to flush the cache and reset
    //Current hotkey is Ctrl+Shift+` (backtick/tilde)
    $(document).on('keydown', function(e) {
      if(e.ctrlKey && e.shiftKey && e.key == '~' && priv.saveonreload == true) //If hotkey combo is pressed and save on reload is set (so that it doesn't run repeatedly)
      {
        priv.saveonreload = false; //Disable save on reload for this session, so that it won't save when you reload the page
        priv.storage.clean('{{project.description.name}}'); //Clean the storage with the key of our projects name
      }
    });

    //Fires when the information text is clicked on.
    $(document).on("click", ".spot-result", function() {
      var category = $(this).data("name"); //Gets the category of the items clicked on.
      var spotstack = data.SpotStack[priv.SceneID][category]; //Gets the spot stack of the current scene and category.
      var spotname = spotstack[data.SpotIndex[priv.SceneID][category]] //Gets the hotspot name from our current spot index.
      krpano.call('looktohotspot('+spotname+',90,smooth(720,-720,720))'); //Pans to the hotspot with an animation

      var index = data.SpotIndex[priv.SceneID][category]; //Saves our current index for logging purposes.
      data.SpotIndex[priv.SceneID][category]++; //Increase our spots index by one.

      //If increasing our spot index put it out of bounds (by being as long as or longer than the length of the array)
      if(data.SpotIndex[priv.SceneID][category] >= data.SpotStack[priv.SceneID][category].length)
      {
        data.SpotIndex[priv.SceneID][category] = 0; //Return our spot index to 0, so we can start again.
      }

      //Trigger an infospot_click event, for any listeners
      $(document).trigger('infospot_click', {
        'hotspot': spotname,
        'index': index,
        'next': data.SpotIndex[priv.SceneID][category],
        'category': category,
      });

      $(document).trigger('cA_event', {category: 'Tour Interactions', action: 'click', label: 'Information Helper', projectEvent: true}); //Trigger an event to inform that the infospot content box was clicked. (This is a project event, and won't be attached to a particular scene name).
    });

    //Toggles visibility
    $(document).on('pano_showtourcontrols pano_hidetourcontrols', function(event) {
      pub.visible(event.type == 'pano_showtourcontrols'); //Toggle whether or not this should be shown, on hide/show events.
    });

    /*******************************
     *      PRIVATE FUNCTIONS      *
     *******************************/

    //Will be private. Public for testing purposes.
    priv.getSpotCounts = function()
    {
      //Data store
      var obj = {
        scenes: {},
        spots: {},
        scene: {},
      };

      //Register the seen and total scene counts.
      obj.scenes.visited = data.VisitedPanoramas.length;
      obj.scenes.total = krpano.get('scene.count');

      var spotCount = 0; //Total spot count
      for(var i=0; i<krpano.get('scene.count'); i++) //Loop through each of the scenes
      {
       var content = krpano.get('scene['+i+'].content'); //Get this scenes XML content
       if(content != '') //If this content isn't empty
       {
         obj.scene[krpano.get('scene['+i+'].name')] = 0; //Store a value in our data store
         var results;  var regex = /<hotspot name="([a-z0-9]+)".*?style="([^"]+).*?tag="point"/gi; //Regex to find each hotspot definition
         while((results = regex.exec(content)) !== null) //Loop through each regex result
         {
           var spotname = results[1]; //Name of the spot
           var spotstyle = results[2]; //Style of the spot
           $.each(settings.Styles, function(index, data) { //Loop through each styles
             if(data.styles.indexOf(spotstyle) > -1 && !data.isPano) //If the spotstyle is in our Styles object, and it's not a panorama spot.
             {
               spotCount++; //Add 1 to our spotCount
               obj.scene[krpano.get('scene['+i+'].name')]++; //Add the value in our scene count
               return false;
             }
           });
         }
       }
      }

      //Register the seen and total infospot counts.
      obj.spots.visited = data.SeenSpotCount;
      obj.spots.total = spotCount;
      return obj;
    }

    //Draws container onto the screen, ready for content to be added
    priv.drawContainer = function()
    {
      // If we don't want to show our content, then bail out here.
      if(!settings.DisplayCounter) { return false; }

      if($('#'+settings.id).length === 0) //If the container doesn't exist already
      {
        var textElem = document.createElement('div'); //Generate a new DIV element
        textElem.id = settings.id; //Give our element an ID

        //Add the container of the square to the container of the tour
        $(settings.parent).prepend(textElem);

        //Set the styles of our DIV
        $(textElem).css({
            'position': 'absolute',
            'z-index': '3018',
            'overflow': 'visible',
            'opacity': '1',
            'text-size-adjust': 'none',
            'pointer-events': 'none',
            'background': 'none',
            'cursor': 'default',
            'width': settings.width+'px',
          });

        var cssPosition = {};
        var size = 2;

        //Calculate the position
        switch (settings.position) {
          case 'topleft':
            cssPosition = { 'top': 0, 'left':0, 'margin-left': settings.margin.x, 'margin-top': settings.margin.y};
            break;

          case 'top':
            cssPosition = { 'top': 0, 'left': '50%', 'margin-left': (size/2)+'px', 'margin-top': settings.margin.y };
            break;

          case 'topright':
            cssPosition = { 'top': 0, 'right': 0, 'margin-top': settings.margin.y, 'margin-right': settings.margin.x };
            break;

          case 'right':
            cssPosition = { 'top': '50%', 'margin-top':(size/2)+'px', 'right':0, 'margin-right': settings.margin.x };
            break;

          case 'bottomright':
            cssPosition = { 'bottom': 0, 'right': 0, 'margin-right': settings.margin.x, 'margin-bottom': settings.margin.y };
            break;

          case 'bottom':
            cssPosition = { 'bottom': 0, 'left': '50%', 'margin-left': (size/2)+'px', 'margin-bottom': settings.margin.y }
            break;

          case 'bottomleft':
            cssPosition = { 'bottom' : 0, 'left' : 0,  'margin-bottom': settings.margin.y, 'margin-left': settings.margin.x };
            break;

          case 'left':
            cssPosition = {'left': 0, 'top': '50%', 'margin-top':(size/2)+'px', 'margin-left': settings.margin.x }
            break;

          case 'center':
            cssPosition = {'top': '50%', 'margin-top':(size/2)+'px', 'left': '50%', 'margin-left': (size/2)+'px'}
            break;
        }

        //Apply the position
        $(textElem).css(cssPosition);
        priv.styles.build();
      }
      priv.container = $('#'+settings.id);
      return $('#'+settings.id);
    };

    //Format and insert the content. Is called every time the information needs to be updated.
    priv.drawContent = function(container)
    {
      // If we don't want to show our content, then bail out here.
      if(!settings.DisplayCounter) { return false; }

      if(typeof container == 'undefined') { container = priv.container; } //If the argument isn't provided, then set it ourselves
      var string = '<div class="spot-box">';
      var spots = priv.sorted;
      if(spots != null)
      {
        $.each(spots, function(name,spot) {
          if(spot.display)
          {
            var seen = priv.history.size(priv.SceneID);
            var total = priv.sorted[name]['items'].length;
            string += '<p class="spot-result" data-name="'+name+'">'+name+' '+seen+' / ' + (total) + '</p>';
          }
        });
      }
      string += "</div>";
      $(container).html('<div class="'+settings.id+'text">'+string+'</div>');
    };

    //Get the panorama name that the spot is attached to (if attached). Otherwise return an empty string.
    priv.getPanoramaName = function(actionname)
    {
        var regex = /mainloadscene\(([^\)]+)/ig;
        var text = krpano.get('action['+actionname+'].content');
        if(text.indexOf("mainloadscene(") > -1)
        {
          var r = regex.exec(text);
          return r[1];
        }
      return '';
    };

    priv.getSpotCategory = function(name)
    {
      var val = '';
      $.each(priv.sorted, function(k, v) {
        $.each(v.items, function(index,v) {
          if(v.name == name)
          {
            val = k;
            return false;
          }
        });
        return (val == '');
      });
      return val;
    };

    //Returns the object containing spot information. Also includes parent details such as display status and if it's a panorama.
    priv.getSpot = function(category, name)
    {
      var item = {};
      $.each(priv.sorted[category].items, function(k, v) {
        if(name == v.name)
        {
          item = v;
          item['display'] = priv.sorted[category].display;
          item['isPano'] = priv.sorted[category].isPano;
          return false;
        }
      });
      return item;
    }

    //Returns the object containing spot information. Also includes parent details such as display status and if it's a panorama.
    priv.getSpotsByPanoName = function(name, callback)
    {
      if(name == '') {return false;}
      var spots = [];
      $.each(priv.sorted, function(k, v) {
        $.each(v.items, function (index, v) {
          if(name == v.pano)
          {
            var spot = priv.getSpot(k, v.name);
            spots.push(spot);
            if(typeof callback == 'function')
            {
              callback.apply(this, [spot])
            }
          }
        });
      });
      return spots;
    }

    //History manager
    priv.history = {
        add: function(obj, callback)
        {
          if(!obj.hasOwnProperty('isPano')) { console.error('History.add() parameter error: requires object with `isPano` property.'); return false; }
          if(obj.isPano)
          {
            var added = false;
            if(data.VisitedPanoramas.indexOf(obj.pano) == -1)
            {
                added = true;
                data.VisitedPanoramas.push(obj.pano);
            }
            if(typeof callback == 'function')
            {
              callback.apply(this, [added,obj]);
            }
            return added;
          }
          else
          {
            var added = false;
            if(data.Spots.History[priv.SceneID].indexOf(obj.name) == -1)
            {
              data.SeenSpotCount++;
              data.Spots.History[priv.SceneID].push(obj.name);
              added = true;

              if(settings.HotspotCycling == 'unseen') {
                var index = data.SpotStack[priv.SceneID][obj.category].indexOf(obj.name);
                if(index > -1)
                {
                  var item = data.SpotStack[priv.SceneID][obj.category].splice(index, 1); //I honestly can't remember what these two lines do. Sorry.
                  data.SpotStackHistory[priv.SceneID][obj.category].push(item[0]);        //I do know that it has something to do with the seen and unseen hotspot stack for the click system though.
                }                                                                         //That should narrow it down for you.
              }
            }
            if(typeof callback == 'function')
            {
              callback.apply(this, [added,obj]);
            }
            return added;
          }
        },
        exists: function(obj)
        {
          if(!obj.hasOwnProperty('isPano')) { console.error('History.exists() parameter error: requires object with `isPano` property.'); return false; }
          if(obj.isPano)
          {
            return data.VisitedPanoramas.indexOf(obj.pano) > -1;
          }
          else
          {
            return data.Spots.History[priv.SceneID].indexOf(obj.name) > -1;
          }
        },
        size: function(scene)
        {
          data.Spots.History[scene] = data.Spots.History[scene] || [];
          return data.Spots.History[scene].length;
        },
        get: function(callback, includePanos)
        {
          if(typeof includePanos == 'undefined') { includePanos = true; }
          if(typeof callback == 'undefined')
          {
            return {"Panoramas": data.VisitedPanoramas, "Hotspots": data.Spots.History[priv.SceneID] };
          }
          else if(typeof callback == 'function')
          {
            if(data.VisitedPanoramas.length > 0 && settings.ShowVisitedPanos && includePanos)
            {
              $.each(data.VisitedPanoramas, function(index, value) {
                if(value != priv.SceneID) {
                  callback.apply(this, [value, true]);
                }
              });
            }
            data.Spots.History[priv.SceneID] = data.Spots.History[priv.SceneID] || [];
            if(data.Spots.History[priv.SceneID].length > 0)
            {
              $.each(data.Spots.History[priv.SceneID], function(index, value) {
                callback.apply(this, [value, false]);
              });
            }
          }
        },
        restore: function() {
            priv.history.get(function(data, isPano)
            {
              if(isPano) {
                priv.getSpotsByPanoName(data, function(spot) {
                  var p = priv.overlay.spotPosition(spot.name);
                  priv.overlay.create(spot, p);
                });
              }
              else {
                var spot = priv.getSpot(priv.getSpotCategory(data), data);
                var p = priv.overlay.spotPosition(spot.name);
                priv.overlay.create(spot, p);
              }
              priv.drawContent();
            });
        }
    };

    //Overlay manager
    priv.overlay = {
      spotPosition: function(hotspot)
      {
        return {'ath': krpano.get('hotspot['+hotspot+'].ath'), 'atv': krpano.get('hotspot['+hotspot+'].atv')};
      },
      create: function(parent, position, offset)
      {
        if(typeof offset == 'undefined') { offset = settings.Overlay.Offset; }
        var name = parent.name+'_seen';
        krpano.call('addhotspot('+name+')');
        krpano.set('hotspot['+name+'].url', settings.Resources+settings.HotspotImage);
        krpano.set('hotspot['+name+'].edge', 'leftbottom');
        krpano.set('hotspot['+name+'].zorder', 100);
        krpano.set('hotspot['+name+'].enabled', false);
        krpano.set('hotspot['+name+'].ath', parseFloat(position.ath)+parseFloat(offset.x));
        krpano.set('hotspot['+name+'].atv', parseFloat(position.atv)+parseFloat(offset.y));
        krpano.set('hotspot['+name+'].scale', parseFloat(settings.Overlay.Scale / 100));
      },
    };

    //Storage manager
    priv.storage = {
      serialize: function(v) {
        return JSON.stringify(v);
      },
      unserialize: function(v) {
        return JSON.parse(v);
      },
      store: function() {
        switch(settings.Storage.StorageMethod)
        {
          case 'localStorage':
          case 'sessionStorage':
            var staleAge = new Date(); staleAge.setDate(staleAge.getDate() + settings.Storage.StaleAge); //Gets the Date Object of our expiry (today + expiry days)
            window[settings.Storage.StorageMethod].setItem('{{project.description.name}}', priv.storage.serialize({
              'data': data,
              'expiry': staleAge.toISOString(),
              'version': pub.version,
            }));
            break;

          case 'visit':
          default:
            break;
        }
      },
      get: function() {
        if('{{project.description.name}}' == '') //the text between the curly braces will be replaced and parsed when the project is built.
        {
          console.error("Description name isn't set yet!");
          return false;
        }

        var containers = ['localStorage', 'sessionStorage'];
        if(containers.indexOf(settings.Storage.StorageMethod) > -1)
        {
          var obj = window[settings.Storage.StorageMethod].getItem('{{project.description.name}}');
          if(obj)
          {
            obj = priv.storage.unserialize(obj);
            var today = new Date();
            if(obj.version == pub.version && Date.parse(obj.expiry) >= today)
            {
              data = obj.data;
            }
            else
            {
              priv.storage.clean('{{project.description.name}}');
            }
          }
        }
      },
      clean: function(id) {
        window[settings.Storage.StorageMethod].removeItem(id);
        console.log("cache flushed.");
      }
    };

    //Floorplan manager
    priv.floorplan = {
      generate: function() {
        if(settings.Floorplan.Show)
        {
          var pins = priv.floorplan.getPins('floorPlan');
          priv.floorplan.findPins(pins, 'floorPlan');
        }
      },
      getPins: function(pid) {
        if(typeof pid == 'undefined') { console.error('Plugin name must be defined!'); return false; }
        var items = {};
        var floorPlanItems = krpano.get('ptplugin['+pid+'].floorplanItems.floorplanItem');
        if(floorPlanItems == null)
          return null;

        floorPlanItems = floorPlanItems.getArray();

        for(var fpI = 0; fpI < floorPlanItems.length; fpI++)
        {
          var spots = floorPlanItems[fpI]['spot'].getArray();
          items[fpI] = items[fpI] || {};
          $.each(spots, function(k,v)
          {
            items[fpI][v.scene] = {
              'spotname': v.name,
              'scene': v.scene,
              'jsclick': v.jsclick,
              'isscene': v.isscene,
            };
          });
        }
        return items;
      },
      findPins: function(pins, pid) {
        if(pins == null)
          return;

        if(!krpano.get('ptplugin['+pid+'].jsready'))
        {
          return setTimeout(function(){priv.floorplan.findPins(pins, pid);}, 500);
        }

        for(var fp in pins)
        {
          $.each(pins[fp], function(k,v)
          {
            if(priv.history.exists({isPano: true, pano: k}))
            {
              priv.floorplan.addPins(v);
            }
          });
        }
      },
      addPins: function(spot) {
        var $img = $('<img id="'+spot.spotname+'_seenmarker">').attr({
          'src': settings.Resources+settings.HotspotImage,
          'width': settings.Floorplan.Size.Width,
          'height': settings.Floorplan.Size.Height,
          'class': 'fp_seenmarker',
        });

        if(!$('#'+spot.spotname+'_seenmarker').length) {
          $("#"+spot.spotname+"_img").append($img);
        }
      },
    };

    /* Style generator */
    priv.styles = {
      build: function() {
        priv.styles.add(".spot-result", {
          "font-family":      settings.font.family,
          "font-weight":      settings.font.weight,
          "font-style":       settings.font.style,
          "text-decoration":  settings.font.decoration,
          "font-size":        settings.font.size,
          "color":            settings.font.color,
          "line-height":      settings.font.lineheight,
          "text-shadow":      settings.font.shadow,
          "background-image": 'url('+settings.Resources+settings.LinkImage+')',
          "background-repeat": "no-repeat",
          "padding": "0px 0 0 32px",
          "background-position": "0px",
          "background-size": "contain",
        });

        if(settings.CompactView)
        {
          priv.styles.add(".spot-result:last-child", {"padding-bottom":"0"});
        }

        priv.styles.add(".spot-box", {
          'position':'absolute',
          'bottom':'0',
          'padding': '10px',
          'background-color': 'rgba(75,75,75,0.8)',
          'border': '1px white solid',
          'border-radius': '3px',
          'pointer-events': 'all',
          });

        priv.styles.add(".spot-box:hover", {
          'background-color': 'rgba(50,50,50,0.9)',
          'cursor': 'pointer',
        });

        priv.styles.add('.spot-box:empty', {'display': 'none' });

        priv.styles.add('.fp_seenmarker', {
          'position': 'absolute',
          'left': settings.Floorplan.Position.Left+'px',
          'top': settings.Floorplan.Position.Top+'px',
        });
        priv.styles.generate();
      },
      add: function(identifier, rule) {
        if(priv.CSS[identifier] == null) { priv.CSS[identifier] = {}; }
        $.extend(priv.CSS[identifier], rule);
      },
      generate: function() {
        var rules = "";
        $.each(priv.CSS, function(id, props)
        {
          rules += id + " {\n";
          $.each(props, function(property, rule) {
            rules += "\t"+property+":"+rule+";\n";
          });
          rules += "}\n\n";
        });
        if($('style#hotspots').length == 0) { $("head").append("<style id='hotspots'></style>"); }
        $("style#hotspots").append(rules);
      }
    };
    return pub;
  }

  var items = {};
  function manager() {
    var pub = {};

    pub.register = function(id, props)
    {
      if(items.hasOwnProperty(id)) { console.error("Can't reregister item."); return items[id]; }
      else {
        if(props == undefined) { props = {}; }
        if(!props.hasOwnProperty('id')) { props = $.extend(true, props, {'id':id}); }
        var p = new plugin(props);
        items[id] = p; if(p.hasOwnProperty('_construct')) { if(typeof p._construct == 'function') { p._construct(); } } return p;
      }
    }

    pub.get = function(id)
    {
      if(items.hasOwnProperty(id)) { return items[id]; }
      else { console.error("Item with ID `" + id + "` doesn't exist. Register your item before you use .get()"); return false; }
    }

    pub.delete = function(id)
    {
      if(items.hasOwnProperty(id)) { delete items[id]; return items.hasOwnProperty(id); }
    }

    pub.dump = function()
    {
      console.log(items);
    }

    return pub;
  }
  return manager;
}(jQuery)))
